// SPDX-License-Identifier: MIT

pragma solidity 0.8.17;

import "@openzeppelin/contracts/utils/math/SignedSafeMath.sol";
import "./SafeSignedFloatMath.sol";

// A Gaussian CDF function based on lookup tables and linear interpolation
contract GaussianCDF {
    using SafeSignedFloatMath for int256;

    int256[100] private vals = [
        int256(-4.26489079 * 1e18),
        -4.17873138 * 1e18,
        -4.09257197 * 1e18,
        -4.00641256 * 1e18,
        -3.92025315 * 1e18,
        -3.83409374 * 1e18,
        -3.74793433 * 1e18,
        -3.66177492 * 1e18,
        -3.57561551 * 1e18,
        -3.4894561 * 1e18,
        -3.40329669 * 1e18,
        -3.31713728 * 1e18,
        -3.23097787 * 1e18,
        -3.05865905 * 1e18,
        -3.14481846 * 1e18,
        -2.97249964 * 1e18,
        -2.88634023 * 1e18,
        -2.80018082 * 1e18,
        -2.71402141 * 1e18,
        -2.627862 * 1e18,
        -2.54170259 * 1e18,
        -2.45554318 * 1e18,
        -2.36938377 * 1e18,
        -2.28322436 * 1e18,
        -2.19706495 * 1e18,
        -2.11090554 * 1e18,
        -2.02474613 * 1e18,
        -1.93858672 * 1e18,
        -1.85242731 * 1e18,
        -1.7662679 * 1e18,
        -1.68010849 * 1e18,
        -1.59394908 * 1e18,
        -1.50778967 * 1e18,
        -1.42163026 * 1e18,
        -1.33547085 * 1e18,
        -1.24931144 * 1e18,
        -1.16315203 * 1e18,
        -1.07699262 * 1e18,
        -0.99083321 * 1e18,
        -0.9046738 * 1e18,
        -0.81851439 * 1e18,
        -0.73235498 * 1e18,
        -0.64619557 * 1e18,
        -0.56003616 * 1e18,
        -0.47387675 * 1e18,
        -0.38771734 * 1e18,
        -0.30155793 * 1e18,
        -0.21539852 * 1e18,
        -0.12923911 * 1e18,
        -0.0430797 * 1e18,
        0.0430797 * 1e18,
        0.12923911 * 1e18,
        0.21539852 * 1e18,
        0.30155793 * 1e18,
        0.38771734 * 1e18,
        0.47387675 * 1e18,
        0.56003616 * 1e18,
        0.64619557 * 1e18,
        0.73235498 * 1e18,
        0.81851439 * 1e18,
        0.9046738 * 1e18,
        0.99083321 * 1e18,
        1.07699262 * 1e18,
        1.16315203 * 1e18,
        1.24931144 * 1e18,
        1.33547085 * 1e18,
        1.42163026 * 1e18,
        1.50778967 * 1e18,
        1.59394908 * 1e18,
        1.68010849 * 1e18,
        1.7662679 * 1e18,
        1.85242731 * 1e18,
        1.93858672 * 1e18,
        2.02474613 * 1e18,
        2.11090554 * 1e18,
        2.19706495 * 1e18,
        2.28322436 * 1e18,
        2.36938377 * 1e18,
        2.45554318 * 1e18,
        2.54170259 * 1e18,
        2.627862 * 1e18,
        2.71402141 * 1e18,
        2.80018082 * 1e18,
        2.88634023 * 1e18,
        2.97249964 * 1e18,
        3.05865905 * 1e18,
        3.14481846 * 1e18,
        3.23097787 * 1e18,
        3.31713728 * 1e18,
        3.40329669 * 1e18,
        3.4894561 * 1e18,
        3.57561551 * 1e18,
        3.66177492 * 1e18,
        3.74793433 * 1e18,
        3.83409374 * 1e18,
        3.92025315 * 1e18,
        4.00641256 * 1e18,
        4.09257197 * 1e18,
        4.17873138 * 1e18,
        4.26489079 * 1e18
    ];

    uint256[100] private cdfVals = [
        uint256(0.000010000 * 1e18),
        0.000014657 * 1e18,
        0.000021331 * 1e18,
        0.000030824 * 1e18,
        0.000044228 * 1e18,
        0.000063014 * 1e18,
        0.000089148 * 1e18,
        0.000125237 * 1e18,
        0.000174702 * 1e18,
        0.000242002 * 1e18,
        0.000332890 * 1e18,
        0.000454725 * 1e18,
        0.000616837 * 1e18,
        0.000830950 * 1e18,
        0.001111650 * 1e18,
        0.001476928 * 1e18,
        0.001948753 * 1e18,
        0.002553699 * 1e18,
        0.003323593 * 1e18,
        0.004296168 * 1e18,
        0.005515700 * 1e18,
        0.007033593 * 1e18,
        0.008908877 * 1e18,
        0.011208578 * 1e18,
        0.014007904 * 1e18,
        0.017390216 * 1e18,
        0.021446719 * 1e18,
        0.026275841 * 1e18,
        0.031982243 * 1e18,
        0.038675457 * 1e18,
        0.046468104 * 1e18,
        0.055473720 * 1e18,
        0.065804183 * 1e18,
        0.077566807 * 1e18,
        0.090861144 * 1e18,
        0.105775592 * 1e18,
        0.122383912 * 1e18,
        0.140741780 * 1e18,
        0.160883514 * 1e18,
        0.182819111 * 1e18,
        0.206531763 * 1e18,
        0.231975963 * 1e18,
        0.259076353 * 1e18,
        0.287727385 * 1e18,
        0.317793898 * 1e18,
        0.349112609 * 1e18,
        0.381494539 * 1e18,
        0.414728310 * 1e18,
        0.448584223 * 1e18,
        0.482818999 * 1e18,
        0.517181001 * 1e18,
        0.551415777 * 1e18,
        0.585271690 * 1e18,
        0.618505461 * 1e18,
        0.650887391 * 1e18,
        0.682206102 * 1e18,
        0.712272615 * 1e18,
        0.740923647 * 1e18,
        0.768024037 * 1e18,
        0.793468237 * 1e18,
        0.817180889 * 1e18,
        0.839116486 * 1e18,
        0.859258220 * 1e18,
        0.877616088 * 1e18,
        0.894224408 * 1e18,
        0.909138856 * 1e18,
        0.922433193 * 1e18,
        0.934195817 * 1e18,
        0.944526280 * 1e18,
        0.953531896 * 1e18,
        0.961324543 * 1e18,
        0.968017757 * 1e18,
        0.973724159 * 1e18,
        0.978553281 * 1e18,
        0.982609784 * 1e18,
        0.985992096 * 1e18,
        0.988791422 * 1e18,
        0.991091123 * 1e18,
        0.992966408 * 1e18,
        0.994484300 * 1e18,
        0.995703832 * 1e18,
        0.996676407 * 1e18,
        0.997446301 * 1e18,
        0.998051247 * 1e18,
        0.998523072 * 1e18,
        0.998888350 * 1e18,
        0.999169050 * 1e18,
        0.999383163 * 1e18,
        0.999545275 * 1e18,
        0.999667110 * 1e18,
        0.999757998 * 1e18,
        0.999825298 * 1e18,
        0.999874763 * 1e18,
        0.999910852 * 1e18,
        0.999936986 * 1e18,
        0.999955772 * 1e18,
        0.999969176 * 1e18,
        0.999978669 * 1e18,
        0.999985343 * 1e18,
        0.999990000 * 1e18
    ];

    uint256 private step = uint256(vals[1] - vals[0]);
    uint256 private nVals = vals.length;

    /**
     * @notice this function returns the cdf for the normal dist. It returns
     * the probability that a statistic is between -infinity and the given
     * input z.
     * @param z z is a wad i.e. scaled by 1e18.
     */
    function cdf(int256 z) external view returns (uint256) {
        if (z < vals[0]) {
            return 0;
        } else if (z > vals[nVals - 1]) {
            return 1e18;
        } else {
            uint256 index = uint256(z - vals[0]) / step;
            (uint256 pL, uint256 pR) = (cdfVals[index], cdfVals[index + 1]);
            if (pR > pL) {
                int256 xL = vals[index];
                return pL + ((pR - pL) * uint256(z - xL)) / step;
            } else {
                int256 xR = vals[index + 1];
                return pR + ((pL - pR) * uint256(xR - z)) / step;
            }
        }
    }
}
